/*
 * knock-knock
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Joke {
    #[serde(rename = "answer_who")]
    pub answer_who: String,
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "source", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub source: Option<Option<String>>,
    #[serde(rename = "tags", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Option<Vec<String>>>,
    #[serde(rename = "whos_there")]
    pub whos_there: String,
}

impl Joke {
    pub fn new(answer_who: String, id: String, whos_there: String) -> Joke {
        Joke {
            answer_who,
            id,
            source: None,
            tags: None,
            whos_there,
        }
    }
}

